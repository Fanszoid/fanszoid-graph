"======================================================== FULLTEXT SEARCH ======================================================"
type _Schema_
  @fulltext(
    name: "ticketSearch"
    language: en
    algorithm: rank
    include: [
      { entity: "Ticket", fields: [{ name: "name" }, { name: "description" }] }
    ]
  )
  @fulltext(
    name: "membershipSearch"
    language: en
    algorithm: rank
    include: [
      {
        entity: "Membership"
        fields: [{ name: "name" }, { name: "description" }]
      }
    ]
  )
  @fulltext(
    name: "eventSearch"
    language: en
    algorithm: rank
    include: [
      { entity: "Event", fields: [{ name: "title" }, { name: "description" }] }
    ]
  )

"============================================================ ENTITIES ==========================================================="
type Event @entity {
  id: ID!
  tickets: [Ticket!]! @derivedFrom(field: "event")
  ticketBalances: [Balance!] @derivedFrom(field: "event")
  sentTickets: [Transfer!] @derivedFrom(field: "event")
  organizer: User!
  metadata: String
  attendees: BigInt!
  paused: Boolean
  collaborators: [User!]!
  eventFanzUri: String
  title: String
  description: String
  type: String
  category: String
  dclX: String
  dclY: String
  city: String
  address: String
  postalCode: String
  socials: [SocialNetwork!] @derivedFrom(field: "event")
  email: String
  website: String
  location: String
  isAvailable: String
  status: String
  inStock: String
  createdAt: String
  updatedAt: String
  image: String
  timezone: String
  fullAddress: String
  latitude: String
  longitude: String
  mapUrl: String
  startDateUTC: BigInt
  endDateUTC: BigInt
  organizerLocation: String
  locationName: String
  pixelCode: String
  questions: [Question!] @derivedFrom(field: "event")
  indexStatus: String!
  askBuyerName: Boolean
  askBuyerId: Boolean
}

type Ticket @entity {
  id: ID!
  event: Event
  creatorRoyalty: Int!
  primaryMarketplaceRoyalty: Int!
  secondaryMarketplaceRoyalty: Int!
  isResellable: Boolean!
  totalAmount: Int!
  ticketBalances: [Balance!]! @derivedFrom(field: "ticket")
  sentTickets: [Transfer!] @derivedFrom(field: "ticket")
  metadata: String
  allowedMemberships: [AllowedMembership!] @derivedFrom(field: "ticket")
  isPrivate: Boolean!
  allowances: [Allowance!]
  ticketIdentifiers: [TicketIdentifier!] @derivedFrom(field: "ticket")

  memberships: [Membership!]! @derivedFrom(field: "validTickets")

  name: String
  description: String
  image: String
  extraRequirement: String
  minRestrictionAmount: Int!
  restrictions: [Restriction!]!

  indexStatus: String!
}

type Membership @entity {
  id: ID!
  organizer: String!
  creatorRoyalty: Int!
  isResellable: Boolean!
  totalAmount: Int!
  membershipBalances: [Balance!]! @derivedFrom(field: "membership")
  sentTickets: [Transfer!] @derivedFrom(field: "membership")
  validTickets: [Ticket!]!
  metadata: String
  isPrivate: Boolean!
  allowances: [Allowance!]

  name: String
  description: String
  image: String
}

type Allowance @entity {
  id: ID!
  amount: Int!
  allowedAddresses: [String!]!
}

enum BalanceType {
  Membership
  Ticket
}

type Balance @entity {
  id: ID!
  ticket: Ticket
  membership: Membership
  type: BalanceType!
  event: Event
  askingPrice: BigInt
  amountOnSell: Int!
  amountOwned: Int!
  owner: User!
  isEventOwner: Boolean!
  ticketIdentifiers: [TicketIdentifier!]! @derivedFrom(field: "ticketBalance")
  ticketIdentifiersIds: [Bytes!]! # https://github.com/graphprotocol/graph-ts/issues/219
  sent: [Transfer!] @derivedFrom(field: "senderBalance")
  received: [Transfer!] @derivedFrom(field: "receiverBalance")
  paymentTokenAddress: String
}

# Entity to keep accountability of each single ticket off-chain (for entrance validation purposes).
type TicketIdentifier @entity {
  id: ID!
  ticket: Ticket!
  owner: User!
  ticketBalance: Balance!
}

type User @entity {
  id: ID! # ETH addr
  address: String!
  events: [Event!] @derivedFrom(field: "organizer")
  ticketBalances: [Balance!] @derivedFrom(field: "owner")
  ticketIdentifiers: [TicketIdentifier!]! @derivedFrom(field: "owner")
  membershipBalances: [Balance!] @derivedFrom(field: "owner")
  sentTickets: [Transfer!] @derivedFrom(field: "sender")
  receivedTickets: [Transfer!] @derivedFrom(field: "receiver")
}

# Fields are optional to make easier the entity setting/updating.
type Transfer @entity {
  id: ID!
  event: Event
  ticket: Ticket
  membership: Membership
  sender: User
  senderBalance: Balance
  receiver: User
  receiverBalance: Balance
  price: BigInt
  amount: Int
  isSale: Boolean
  createdAt: BigInt
}

type SocialNetwork @entity {
  id: ID!
  name: String!
  url: String
  event: Event!
}

type AllowedMembership @entity {
  id: ID!
  address: String!
  tokenIds: [BigInt!]
  ticket: Ticket!
}

type Restriction @entity {
  id: ID!
  condition: String!
  conditionType: String!
  name: String
  imageUrl: String
}

type Reservation @entity {
  id: ID!
  ticket: Ticket!
  ticketOwner: User!
  ticketBuyer: User!
  amount: Int!
}

type Erc20TokenAddress @entity {
  id: ID! # ETH addr
  address: String!
  fixedFee: BigInt!
}

type MarketplaceFee @entity {
  id: ID!
  primaryMarketplaceRoyalty: Int!
  secondaryMarketplaceRoyalty: Int!
}

type Question @entity {
  id: ID!
  event: Event!
  description: String!
  responseType: String!
  required: Boolean!
  responseOptions: [String!]!
}
