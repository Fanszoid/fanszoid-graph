"======================================================== FULLTEXT SEARCH ======================================================" 

type _Schema_
  @fulltext(
    name: "ticketSearch"
    language: en
    algorithm: rank
    include: [{ 
      entity: "Ticket", 
      fields: [
        { name: "name" }, 
        { name: "description" }, 
      ] 
    }]
  )

  @fulltext(
    name: "membershipSearch"
    language: en
    algorithm: rank
    include: [{ 
      entity: "Membership", 
      fields: [
        { name: "name" }, 
        { name: "description" }, 
      ] 
    }]
  )

@fulltext(
  name: "eventSearch"
  language: en
  algorithm: rank
  include: [{ 
    entity: "Event", 
    fields: [
      { name: "title" }, 
      { name: "description" }, 
    ] 
  }]
)

"============================================================ ENTITIES ===========================================================" 

type Event @entity {
  id: ID!
  tickets: [Ticket!]! @derivedFrom(field: "event")
  ticketBalances: [Balance!]! @derivedFrom(field: "event")
  sentTickets: [Transfer!] @derivedFrom(field: "event")
  organizer: User!
  metadata: String
  attendees: BigInt!
  
  title: String!
  description: String
  type: String!
  category: String
  dclX: String
  dclY: String
  city: String
  postalCode: String
  socials: [SocialNetwork!] @derivedFrom(field: "event")
  email: String
  website: String
  isAvailable: String
  status: String
  inStock: String
  createdAt: String
  updatedAt: String
  image: String
  startDateUTC: BigInt
  endDateUTC: BigInt
}

type Ticket @entity {
  id: ID!
  event: Event
  creatorRoyalty: Int!
  isResellable: Boolean!
  totalAmount: Int!
  ticketBalances: [Balance!]! @derivedFrom(field: "ticket")
  sentTickets: [Transfer!] @derivedFrom(field: "ticket")
  metadata: String
  allowedMemberships: [AllowedMembership!]!

  name: String
  description: String
  image: String
}

type Membership @entity {
  id: ID!
  organizer: Bytes!
  creatorRoyalty: Int!
  isResellable: Boolean!
  totalAmount: Int!
  membershipBalances: [Balance!]! @derivedFrom(field: "membership")
  sentTickets: [Transfer!] @derivedFrom(field: "membership")
  metadata: String

  name: String
  description: String
  image: String
}

type Balance @entity {
  id: ID!
  ticket: Ticket
  membership: Membership
  event: Event!
  askingPrice: BigInt
  amountOnSell: Int!
  amountOwned: Int!
  owner: User!
  isEventOwner: Boolean!
  sent: [Transfer!] @derivedFrom(field: "senderBalance")
  received: [Transfer!] @derivedFrom(field: "receiverBalance")
}

type User @entity {
  id: ID! # ETH addr
  address: Bytes!
  events: [Event!] @derivedFrom(field: "organizer")
  ticketBalances: [Balance!] @derivedFrom(field: "owner")
  membershipBalances: [Balance!] @derivedFrom(field: "owner")
  sentTickets: [Transfer!] @derivedFrom(field: "sender")
  receivedTickets: [Transfer!] @derivedFrom(field: "receiver")
}

# Fields are optional to make easier the entity setting/updating.
type Transfer @entity {
  id: ID!
  event: Event
  ticket: Ticket
  membership: Membership
  sender: User
  senderBalance: Balance
  receiver: User
  receiverBalance: Balance
  price: BigInt
  amount: Int
  isSale: Boolean
  createdAt: BigInt
}

type SocialNetwork @entity {
  id: ID!
  name: String!
  url: String
  event: Event!
}

type AllowedMembership @entity {
  id: ID!
  address: Bytes!
  tokenIds: [BigInt!]
}
