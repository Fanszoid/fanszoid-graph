// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Event extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("metadata", Value.fromString(""));
    this.set("organizer", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Event entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Event entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Event", id.toString(), this);
    }
  }

  static load(id: string): Event | null {
    return changetype<Event | null>(store.get("Event", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tickets(): Array<string> | null {
    let value = this.get("tickets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set tickets(value: Array<string> | null) {
    if (!value) {
      this.unset("tickets");
    } else {
      this.set("tickets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get ticketBalances(): Array<string> {
    let value = this.get("ticketBalances");
    return value!.toStringArray();
  }

  set ticketBalances(value: Array<string>) {
    this.set("ticketBalances", Value.fromStringArray(value));
  }

  get sentTickets(): Array<string> | null {
    let value = this.get("sentTickets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sentTickets(value: Array<string> | null) {
    if (!value) {
      this.unset("sentTickets");
    } else {
      this.set("sentTickets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get organizer(): string {
    let value = this.get("organizer");
    return value!.toString();
  }

  set organizer(value: string) {
    this.set("organizer", Value.fromString(value));
  }
}

export class Ticket extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("metadata", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ticket entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Ticket entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Ticket", id.toString(), this);
    }
  }

  static load(id: string): Ticket | null {
    return changetype<Ticket | null>(store.get("Ticket", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event(): string | null {
    let value = this.get("event");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set event(value: string | null) {
    if (!value) {
      this.unset("event");
    } else {
      this.set("event", Value.fromString(<string>value));
    }
  }

  get creatorRoyalty(): i32 {
    let value = this.get("creatorRoyalty");
    return value!.toI32();
  }

  set creatorRoyalty(value: i32) {
    this.set("creatorRoyalty", Value.fromI32(value));
  }

  get isResellable(): boolean {
    let value = this.get("isResellable");
    return value!.toBoolean();
  }

  set isResellable(value: boolean) {
    this.set("isResellable", Value.fromBoolean(value));
  }

  get metadata(): string {
    let value = this.get("metadata");
    return value!.toString();
  }

  set metadata(value: string) {
    this.set("metadata", Value.fromString(value));
  }

  get totalAmount(): i32 {
    let value = this.get("totalAmount");
    return value!.toI32();
  }

  set totalAmount(value: i32) {
    this.set("totalAmount", Value.fromI32(value));
  }

  get ticketBalances(): Array<string> {
    let value = this.get("ticketBalances");
    return value!.toStringArray();
  }

  set ticketBalances(value: Array<string>) {
    this.set("ticketBalances", Value.fromStringArray(value));
  }

  get sentTickets(): Array<string> | null {
    let value = this.get("sentTickets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sentTickets(value: Array<string> | null) {
    if (!value) {
      this.unset("sentTickets");
    } else {
      this.set("sentTickets", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class TicketBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ticket", Value.fromString(""));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TicketBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TicketBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TicketBalance", id.toString(), this);
    }
  }

  static load(id: string): TicketBalance | null {
    return changetype<TicketBalance | null>(store.get("TicketBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ticket(): string {
    let value = this.get("ticket");
    return value!.toString();
  }

  set ticket(value: string) {
    this.set("ticket", Value.fromString(value));
  }

  get event(): string | null {
    let value = this.get("event");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set event(value: string | null) {
    if (!value) {
      this.unset("event");
    } else {
      this.set("event", Value.fromString(<string>value));
    }
  }

  get askingPrice(): BigInt | null {
    let value = this.get("askingPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set askingPrice(value: BigInt | null) {
    if (!value) {
      this.unset("askingPrice");
    } else {
      this.set("askingPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get amountOnSell(): i32 {
    let value = this.get("amountOnSell");
    return value!.toI32();
  }

  set amountOnSell(value: i32) {
    this.set("amountOnSell", Value.fromI32(value));
  }

  get amountOwned(): i32 {
    let value = this.get("amountOwned");
    return value!.toI32();
  }

  set amountOwned(value: i32) {
    this.set("amountOwned", Value.fromI32(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get isEventOwner(): boolean {
    let value = this.get("isEventOwner");
    return value!.toBoolean();
  }

  set isEventOwner(value: boolean) {
    this.set("isEventOwner", Value.fromBoolean(value));
  }

  get sentTickets(): Array<string> | null {
    let value = this.get("sentTickets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sentTickets(value: Array<string> | null) {
    if (!value) {
      this.unset("sentTickets");
    } else {
      this.set("sentTickets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get receivedTickets(): Array<string> | null {
    let value = this.get("receivedTickets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set receivedTickets(value: Array<string> | null) {
    if (!value) {
      this.unset("receivedTickets");
    } else {
      this.set("receivedTickets", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("address", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save User entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value!.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get events(): Array<string> | null {
    let value = this.get("events");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set events(value: Array<string> | null) {
    if (!value) {
      this.unset("events");
    } else {
      this.set("events", Value.fromStringArray(<Array<string>>value));
    }
  }

  get ticketBalances(): Array<string> | null {
    let value = this.get("ticketBalances");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set ticketBalances(value: Array<string> | null) {
    if (!value) {
      this.unset("ticketBalances");
    } else {
      this.set("ticketBalances", Value.fromStringArray(<Array<string>>value));
    }
  }

  get sentTickets(): Array<string> | null {
    let value = this.get("sentTickets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set sentTickets(value: Array<string> | null) {
    if (!value) {
      this.unset("sentTickets");
    } else {
      this.set("sentTickets", Value.fromStringArray(<Array<string>>value));
    }
  }

  get receivedTickets(): Array<string> | null {
    let value = this.get("receivedTickets");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set receivedTickets(value: Array<string> | null) {
    if (!value) {
      this.unset("receivedTickets");
    } else {
      this.set("receivedTickets", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("event", Value.fromString(""));
    this.set("ticket", Value.fromString(""));
    this.set("sender", Value.fromString(""));
    this.set("senderBalance", Value.fromString(""));
    this.set("receiver", Value.fromString(""));
    this.set("receiverBalance", Value.fromString(""));
    this.set("price", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Transfer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Transfer", id.toString(), this);
    }
  }

  static load(id: string): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event(): string {
    let value = this.get("event");
    return value!.toString();
  }

  set event(value: string) {
    this.set("event", Value.fromString(value));
  }

  get ticket(): string {
    let value = this.get("ticket");
    return value!.toString();
  }

  set ticket(value: string) {
    this.set("ticket", Value.fromString(value));
  }

  get sender(): string {
    let value = this.get("sender");
    return value!.toString();
  }

  set sender(value: string) {
    this.set("sender", Value.fromString(value));
  }

  get senderBalance(): string {
    let value = this.get("senderBalance");
    return value!.toString();
  }

  set senderBalance(value: string) {
    this.set("senderBalance", Value.fromString(value));
  }

  get receiver(): string {
    let value = this.get("receiver");
    return value!.toString();
  }

  set receiver(value: string) {
    this.set("receiver", Value.fromString(value));
  }

  get receiverBalance(): string {
    let value = this.get("receiverBalance");
    return value!.toString();
  }

  set receiverBalance(value: string) {
    this.set("receiverBalance", Value.fromString(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get amount(): i32 {
    let value = this.get("amount");
    return value!.toI32();
  }

  set amount(value: i32) {
    this.set("amount", Value.fromI32(value));
  }

  get isSale(): boolean {
    let value = this.get("isSale");
    return value!.toBoolean();
  }

  set isSale(value: boolean) {
    this.set("isSale", Value.fromBoolean(value));
  }
}
